import Foundation
import Swiftlets

@main
struct ResourcesStorageGuide {
	static func main() async throws {
		_ = try JSONDecoder().decode(Request.self, from: FileHandle.standardInput.readDataToEndOfFile())

		let html = Html {
			Head {
				Title("Resources & Storage - Swiftlets")
				Meta(name: "viewport", content: "width=device-width, initial-scale=1.0")
				LinkElement(rel: "stylesheet", href: "/styles/main.css")
			}
			Body {
				navBar()
				
				Container(maxWidth: .large) {
					VStack(spacing: 40) {
						breadcrumbs()
						
						H1("Resources & Storage")
						
						P("This guide explains how to use resources and storage in your swiftlets.")
							.style("font-size", "1.25rem")
						
						overviewSection()
						resourcesSection()
						storageSection()
						bestPracticesSection()
						learnMoreSection()
					}
				}
				.style("padding", "3rem 0")
				
				footer()
			}
		}

		let response = Response(
			status: 200,
			headers: ["Content-Type": "text/html; charset=utf-8"],
			body: html.render()
		)

		print(try JSONEncoder().encode(response).base64EncodedString())
	}
	
	@HTMLBuilder
	static func navBar() -> some HTML {
		Nav {
			Container(maxWidth: .xl) {
				HStack {
					Link(href: "/") {
						H1("Swiftlets").style("margin", "0")
					}
					Spacer()
					HStack(spacing: 20) {
						Link(href: "/docs", "Documentation").class("active")
						Link(href: "/showcase", "Showcase")
						Link(href: "/about", "About")
						Link(href: "https://github.com/codelynx/swiftlets", "GitHub")
							.attribute("target", "_blank")
					}
				}
				.style("align-items", "center")
			}
		}
		.style("background", "#f8f9fa")
		.style("padding", "1rem 0")
		.style("border-bottom", "1px solid #dee2e6")
	}
	
	@HTMLBuilder
	static func breadcrumbs() -> some HTML {
		HStack(spacing: 10) {
			Link(href: "/docs", "Docs")
			Text("→")
			Link(href: "/docs/concepts", "Core Concepts")
			Text("→")
			Text("Resources & Storage")
		}
		.style("color", "#6c757d")
	}
	
	@HTMLBuilder
	static func overviewSection() -> some HTML {
		Section {
			H2("Overview")
			P("Swiftlets have two distinct systems for working with files:")
			UL {
				LI {
					Strong("Resources")
					Text(" - Read-only files in ")
					Code(".res/")
					Text(" directories (config, templates, data)")
				}
				LI {
					Strong("Storage")
					Text(" - Read-write files in ")
					Code("var/")
					Text(" directories (uploads, cache, databases)")
				}
			}
		}
	}
	
	@HTMLBuilder
	static func resourcesSection() -> some HTML {
		Section {
			H2("Resources (.res/)")
			P("Resources are read-only files that your swiftlet needs at runtime. They support hierarchical lookup (like CSS inheritance).")
			
			H3("Basic Usage")
			Pre {
				Code("""
// In your swiftlet
let context = DefaultSwiftletContext(from: request.context!)

// Read a resource file
let configData = try context.resources.read(named: "config.json")
let config = try configData.json(as: Config.self)

// Read text file
let templateData = try context.resources.read(named: "email-template.txt")
let template = try templateData.string()
""")
			}
			.style("background", "#f8f9fa")
			.style("padding", "1rem")
			.style("border-radius", "0.375rem")
			.style("overflow-x", "auto")
			
			H3("File Organization")
			Pre {
				Code("""
sites/my-site/
├── src/
│   ├── .res/                    # Global resources
│   │   ├── config.json         # Site-wide config
│   │   └── theme.json          # Default theme
│   │
│   └── blog/
│       ├── .res/               # Blog-specific resources
│       │   └── theme.json      # Overrides global theme
│       └── index.swift
""")
			}
			.style("background", "#f8f9fa")
			.style("padding", "1rem")
			.style("border-radius", "0.375rem")
			
			H3("Hierarchical Lookup")
			P("Resources use automatic fallback - searches from most specific to least specific.")
		}
	}
	
	@HTMLBuilder
	static func storageSection() -> some HTML {
		Section {
			H2("Storage (var/)")
			P("Storage provides read-write access for dynamic content. The working directory is automatically set to your route's var directory.")
			
			H3("Basic Usage")
			Pre {
				Code("""
// Save data
let userData = try JSONEncoder().encode(user)
try context.storage.write(userData, to: "users/\\(userId).json")

// Read data
let savedData = try context.storage.read(from: "users/\\(userId).json")
let user = try JSONDecoder().decode(User.self, from: savedData)

// Check existence
if context.storage.exists("cache/data.json") {
    // Use cached data
}
""")
			}
			.style("background", "#f8f9fa")
			.style("padding", "1rem")
			.style("border-radius", "0.375rem")
			.style("overflow-x", "auto")
			
			H3("Common Patterns")
			UL {
				LI("User uploads and file management")
				LI("Caching and temporary files")
				LI("Session management")
				LI("SQLite databases")
			}
		}
	}
	
	@HTMLBuilder
	static func bestPracticesSection() -> some HTML {
		Section {
			H2("Best Practices")
			
			H3("Resources")
			OL {
				LI {
					Strong("Never put secrets in web/")
					Text(" - Use ")
					Code(".res/")
					Text(" for API keys")
				}
				LI("Use JSON for configuration files")
				LI("Keep resources small for fast startup")
			}
			
			H3("Storage")
			OL {
				LI("Always validate paths to prevent attacks")
				LI("Use UUIDs for user content filenames")
				LI("Implement cleanup for old files")
				LI("Plan for backup of user data")
			}
		}
	}
	
	@HTMLBuilder
	static func learnMoreSection() -> some HTML {
		Section {
			H2("Learn More")
			P("For complete documentation with detailed code examples and patterns:")
			P {
				Link(href: "https://github.com/codelynx/swiftlets/blob/main/docs/resources-programming-guide.md") { 
					"View Full Programming Guide →" 
				}
				.attribute("target", "_blank")
			}
			.style("font-size", "1.125rem")
		}
	}
	
	@HTMLBuilder
	static func footer() -> some HTML {
		Footer {
			Container(maxWidth: .large) {
				P("© 2025 Swiftlets Project")
			}
		}
		.style("padding", "2rem 0")
		.style("border-top", "1px solid #dee2e6")
	}
}