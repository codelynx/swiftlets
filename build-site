#!/bin/bash
# build-site - Swiftlets site builder
# Reliable build system with proper error handling and timeout support
#
# STATIC BUILD SUPPORT:
# This script supports building static binaries with embedded Swift runtime.
# Use the --static flag to create self-contained executables that don't require
# Swift to be installed on the deployment target.
#
# Static linking is only supported on Linux. On macOS, the flag is ignored.
# Static binaries are larger (100-150MB) but simplify deployment to EC2.
#
# Example: ./build-site sites/swiftlets-site --static

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script configuration
SCRIPT_NAME=$(basename "$0")
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"

# Default values
VERBOSE=false
FORCE_BUILD=false
CLEAN_BUILD=false
STATIC_BUILD=false
BUILD_TIMEOUT=60  # Increased from 30s for complex Swift files on EC2
PARALLEL_BUILDS=1  # Sequential builds for memory-constrained environments

# Platform detection
OS=$(uname -s | tr '[:upper:]' '[:lower:]')
ARCH=$(uname -m)

# Normalize OS names
case "$OS" in
    darwin*) OS="macos" ;;
    linux*) OS="linux" ;;
    *) echo -e "${RED}Unsupported OS: $OS${NC}"; exit 1 ;;
esac

# Normalize architecture names
case "$ARCH" in
    x86_64) ARCH="x86_64" ;;
    aarch64|arm64) ARCH="arm64" ;;
    *) echo -e "${RED}Unsupported architecture: $ARCH${NC}"; exit 1 ;;
esac

# Usage function
usage() {
    cat << EOF
Usage: $SCRIPT_NAME <site-root> [options]

Build a Swiftlets site by compiling Swift files from src/ to bin/

Arguments:
  site-root         Path to the site directory (containing src/ and web/)

Options:
  -v, --verbose     Show detailed build output
  -f, --force       Force rebuild all files (ignore timestamps)
  -c, --clean       Clean bin directory and .webbin files (use alone to clean only)
  -s, --static      Build with static Swift stdlib (Linux only, for deployment)
                    Creates self-contained binaries that don't need Swift runtime
                    Note: Increases binary size to ~100-150MB per executable
  -t, --timeout N   Set build timeout per file in seconds (default: 60)
  -j, --jobs N      Number of parallel builds (default: 1)
  -h, --help        Show this help message

Note: Default timeout increased to 60s for complex Swift files.
      For resource-constrained environments (EC2 t2.micro, etc), 
      use -j 1 (default) to avoid memory issues.

Environment Variables:
  BUILD_TIMEOUT     Override default timeout (seconds)
  BUILD_JOBS        Override default parallel builds

Examples:
  $SCRIPT_NAME sites/swiftlets-site
  $SCRIPT_NAME sites/swiftlets-site --verbose --force
  $SCRIPT_NAME sites/swiftlets-site --clean              # Clean only
  $SCRIPT_NAME sites/swiftlets-site --clean --force      # Clean then build
  $SCRIPT_NAME sites/swiftlets-site --static             # Static build for Linux deployment
  $SCRIPT_NAME sites/swiftlets-site -t 60 -j 4

Static Build Notes:
  - Static builds embed the Swift runtime into each executable
  - Only works on Linux (ignored on macOS with warning)
  - Ideal for deployment to servers without Swift installed
  - See docs/deployment-static-binaries.md for details

EOF
}

# Parse command line arguments
parse_args() {
    if [ $# -eq 0 ]; then
        usage
        exit 1
    fi
    
    SITE_ROOT=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -f|--force)
                FORCE_BUILD=true
                shift
                ;;
            -c|--clean)
                CLEAN_BUILD=true
                shift
                ;;
            -s|--static)
                STATIC_BUILD=true
                shift
                ;;
            -t|--timeout)
                if [[ -n "$2" && "$2" =~ ^[0-9]+$ ]]; then
                    BUILD_TIMEOUT="$2"
                    shift 2
                else
                    echo -e "${RED}Error: --timeout requires a numeric argument${NC}"
                    exit 1
                fi
                ;;
            -j|--jobs)
                if [[ -n "$2" && "$2" =~ ^[0-9]+$ ]]; then
                    PARALLEL_BUILDS="$2"
                    shift 2
                else
                    echo -e "${RED}Error: --jobs requires a numeric argument${NC}"
                    exit 1
                fi
                ;;
            -h|--help)
                usage
                exit 0
                ;;
            -*)
                echo -e "${RED}Unknown option: $1${NC}"
                usage
                exit 1
                ;;
            *)
                if [ -z "$SITE_ROOT" ]; then
                    SITE_ROOT="$1"
                else
                    echo -e "${RED}Error: Multiple site roots specified${NC}"
                    usage
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    # Validate site root
    if [ -z "$SITE_ROOT" ]; then
        echo -e "${RED}Error: No site root specified${NC}"
        usage
        exit 1
    fi
    
    # Convert to absolute path
    SITE_ROOT="$(cd "$SITE_ROOT" 2>/dev/null && pwd)" || {
        echo -e "${RED}Error: Site root directory not found: $SITE_ROOT${NC}"
        exit 1
    }
    
    # Check required directories
    if [ ! -d "$SITE_ROOT/src" ]; then
        echo -e "${RED}Error: No 'src' directory found in $SITE_ROOT${NC}"
        exit 1
    fi
    
    # Environment variable overrides
    BUILD_TIMEOUT="${BUILD_TIMEOUT:-30}"
    PARALLEL_BUILDS="${BUILD_JOBS:-$PARALLEL_BUILDS}"
}

# Log function
log() {
    local level=$1
    shift
    local message="$@"
    
    case $level in
        DEBUG)
            [ "$VERBOSE" = true ] && echo -e "${BLUE}[DEBUG]${NC} $message" >&2
            ;;
        INFO)
            echo -e "${GREEN}[INFO]${NC} $message"
            ;;
        WARN)
            echo -e "${YELLOW}[WARN]${NC} $message" >&2
            ;;
        ERROR)
            echo -e "${RED}[ERROR]${NC} $message" >&2
            ;;
    esac
}

# Get framework sources
get_framework_sources() {
    echo "$SCRIPT_DIR/Sources/Swiftlets/Core/*.swift \
        $SCRIPT_DIR/Sources/Swiftlets/HTML/Core/*.swift \
        $SCRIPT_DIR/Sources/Swiftlets/HTML/Elements/*.swift \
        $SCRIPT_DIR/Sources/Swiftlets/HTML/Helpers/*.swift \
        $SCRIPT_DIR/Sources/Swiftlets/HTML/Layout/*.swift \
        $SCRIPT_DIR/Sources/Swiftlets/HTML/Modifiers/*.swift \
        $SCRIPT_DIR/Sources/Swiftlets/HTML/Builders/*.swift"
}

# Discover shared components for a given file
discover_shared_components() {
    local swift_file="$1"
    local src_root="$SITE_ROOT/src"
    local shared_files=""
    
    # Get directory path relative to src/
    local rel_path="${swift_file#$src_root/}"
    local dir_path=$(dirname "$rel_path")
    
    log DEBUG "Discovering shared components for: $rel_path"
    
    # Walk up directory tree from file location
    local current_dir="$dir_path"
    while [ "$current_dir" != "." ] && [ "$current_dir" != "/" ]; do
        if [ -d "$src_root/$current_dir/shared" ]; then
            log DEBUG "  Found: $current_dir/shared/"
            # Add all Swift files in this shared directory
            for shared_file in "$src_root/$current_dir/shared/"*.swift; do
                if [ -f "$shared_file" ]; then
                    shared_files="$shared_files $shared_file"
                fi
            done
        fi
        current_dir=$(dirname "$current_dir")
    done
    
    # Add global shared directory
    if [ -d "$src_root/shared" ]; then
        log DEBUG "  Found: shared/ (global)"
        for shared_file in "$src_root/shared/"*.swift; do
            if [ -f "$shared_file" ]; then
                shared_files="$shared_files $shared_file"
            fi
        done
    fi
    
    echo "$shared_files"
}

# Check if file needs building
needs_build() {
    local src_file="$1"
    local output_file="$2"
    local shared_components="$3"
    
    # Force build if requested
    if [ "$FORCE_BUILD" = true ]; then
        return 0
    fi
    
    # Build if output doesn't exist
    if [ ! -f "$output_file" ]; then
        return 0
    fi
    
    # Build if source is newer than output
    if [ "$src_file" -nt "$output_file" ]; then
        return 0
    fi
    
    # Build if any shared component is newer than output
    for shared_file in $shared_components; do
        if [ "$shared_file" -nt "$output_file" ]; then
            return 0
        fi
    done
    
    # Build if legacy Components.swift is newer
    if [ -f "$SITE_ROOT/src/Components.swift" ] && [ "$SITE_ROOT/src/Components.swift" -nt "$output_file" ]; then
        return 0
    fi
    
    # No need to build
    return 1
}

# Build a single Swift file
build_swift_file() {
    local src_file="$1"
    local rel_path="${src_file#$SITE_ROOT/src/}"
    local output_dir="$SITE_ROOT/bin/$(dirname "$rel_path")"
    local output_file="$SITE_ROOT/bin/${rel_path%.swift}"
    local webbin_file="$SITE_ROOT/web/${rel_path%.swift}.webbin"
    
    # Create output directory
    mkdir -p "$output_dir"
    mkdir -p "$(dirname "$webbin_file")"
    
    # Discover shared components
    local shared_components=$(discover_shared_components "$src_file")
    
    # Check if build is needed
    if ! needs_build "$src_file" "$output_file" "$shared_components"; then
        log INFO "  ✓ Up to date: $rel_path"
        return 0
    fi
    
    log INFO "  Building: $rel_path"
    
    # Prepare temp file (remove import Swiftlets)
    local temp_dir="$SITE_ROOT/.build/temp"
    mkdir -p "$temp_dir"
    local temp_file="$temp_dir/$(basename "$src_file")"
    
    sed -e '/^import Swiftlets$/d' \
        -e 's/let request = try/let _ = try/' \
        "$src_file" > "$temp_file"
    
    # Build command
    local build_cmd="swiftc -parse-as-library -module-name Swiftlets"
    
    # Add static linking flags if requested (Linux only)
    if [ "$STATIC_BUILD" = true ]; then
        if [ "$OS" = "linux" ]; then
            build_cmd="$build_cmd -static-stdlib -static-executable"
        else
            log WARN "Static linking is only supported on Linux. Ignoring --static flag on $OS."
            STATIC_BUILD=false  # Reset flag to avoid confusion in logs
        fi
    fi
    
    # Add framework sources
    build_cmd="$build_cmd $(get_framework_sources)"
    
    # Add legacy Components.swift if exists
    if [ -f "$SITE_ROOT/src/Components.swift" ]; then
        build_cmd="$build_cmd $SITE_ROOT/src/Components.swift"
    fi
    
    # Add discovered shared components
    if [ -n "$shared_components" ]; then
        build_cmd="$build_cmd $shared_components"
    fi
    
    # Add the temp file and output
    build_cmd="$build_cmd $temp_file -o $output_file"
    
    log DEBUG "Build command: $build_cmd"
    
    # Execute build with timeout
    local build_start=$(date +%s)
    local build_output
    local build_status
    
    # Check for timeout command
    if command -v gtimeout >/dev/null 2>&1; then
        TIMEOUT_CMD="gtimeout"
    elif command -v timeout >/dev/null 2>&1; then
        TIMEOUT_CMD="timeout"
    else
        log WARN "No timeout command found. Install coreutils for build timeouts."
        TIMEOUT_CMD=""
    fi
    
    # Run build
    if [ -n "$TIMEOUT_CMD" ]; then
        build_output=$($TIMEOUT_CMD --foreground --kill-after=$((BUILD_TIMEOUT + 5)) $BUILD_TIMEOUT bash -c "eval $build_cmd" 2>&1)
        build_status=$?
    else
        build_output=$(eval $build_cmd 2>&1)
        build_status=$?
    fi
    
    local build_end=$(date +%s)
    local build_time=$((build_end - build_start))
    
    # Handle build result
    if [ $build_status -eq 124 ]; then
        # Timeout
        log ERROR "    ✗ Build timeout after ${BUILD_TIMEOUT}s"
        log ERROR "    💡 Solution: Break down complex HTML into smaller functions"
        log ERROR "    📖 See: docs/troubleshooting-complex-expressions.md"
        rm -f "$temp_file"
        return 1
    elif [ $build_status -eq 0 ]; then
        # Success
        if [ $build_time -gt 10 ]; then
            log WARN "    ⚠️  Slow build: ${build_time}s"
        else
            log INFO "    ✓ Success (${build_time}s)"
        fi
        
        # Create webbin file with MD5 hash
        if command -v md5 >/dev/null 2>&1; then
            md5 -q "$output_file" > "$webbin_file"
        elif command -v md5sum >/dev/null 2>&1; then
            md5sum "$output_file" | cut -d' ' -f1 > "$webbin_file"
        fi
        
        rm -f "$temp_file"
        return 0
    else
        # Build failed
        log ERROR "    ✗ Build failed"
        if [ -n "$build_output" ]; then
            if echo "$build_output" | grep -q "expression.*too complex"; then
                log ERROR "    💡 Solution: Break down complex HTML into smaller functions"
                log ERROR "    📖 See: docs/troubleshooting-complex-expressions.md"
            else
                log ERROR "Build output:"
                echo "$build_output" | sed 's/^/    /' >&2
            fi
        fi
        rm -f "$temp_file"
        return 1
    fi
}

# Main build function
build_site() {
    log INFO "Building site: $SITE_ROOT"
    log INFO "Platform: $OS/$ARCH"
    if [ "$STATIC_BUILD" = true ]; then
        log INFO "Build mode: Static (with stdlib)"
    else
        log INFO "Build mode: Dynamic"
    fi
    log INFO "Timeout: ${BUILD_TIMEOUT}s per file"
    
    # Create directories
    mkdir -p "$SITE_ROOT/bin"
    mkdir -p "$SITE_ROOT/web"
    mkdir -p "$SITE_ROOT/.build/temp"
    
    # Find all Swift files
    local swift_files=()
    while IFS= read -r -d '' file; do
        # Skip Components.swift (it's included separately)
        # Skip files in shared/ directories (they're included as components)
        if [[ "$(basename "$file")" != "Components.swift" ]] && [[ "$file" != *"/shared/"* ]]; then
            swift_files+=("$file")
        fi
    done < <(find "$SITE_ROOT/src" -name "*.swift" -type f -print0 | sort -z)
    
    local total_files=${#swift_files[@]}
    log INFO "Found $total_files Swift files to build"
    
    # Build statistics
    local built=0
    local skipped=0
    local failed=0
    
    # Build each file
    for file in "${swift_files[@]}"; do
        if build_swift_file "$file"; then
            ((built++))
        else
            ((failed++))
        fi
    done
    
    # Clean up temp directory
    rm -rf "$SITE_ROOT/.build/temp"
    
    # Summary
    echo
    log INFO "Build Summary:"
    log INFO "  Total:   $total_files"
    log INFO "  Built:   $built"
    log INFO "  Failed:  $failed"
    
    if [ $failed -gt 0 ]; then
        return 1
    else
        return 0
    fi
}

# Clean function
clean_site() {
    log INFO "Cleaning site: $SITE_ROOT"
    
    if [ -d "$SITE_ROOT/bin" ]; then
        log INFO "Removing bin directory..."
        rm -rf "$SITE_ROOT/bin"
    fi
    
    if [ -d "$SITE_ROOT/web" ]; then
        log INFO "Removing .webbin files..."
        rm -f "$SITE_ROOT/web"/*.webbin
    fi
    
    log INFO "Clean complete"
}

# Main execution
main() {
    parse_args "$@"
    
    if [ "$CLEAN_BUILD" = true ]; then
        clean_site
        # If only --clean was specified without other build options, exit
        if [ "$FORCE_BUILD" = false ] && [ "$VERBOSE" = false ]; then
            exit 0
        fi
    fi
    
    build_site
}

# Run main function
main "$@"