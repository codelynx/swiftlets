# Nginx configuration for Swiftlets
# Place this file in /etc/nginx/sites-available/swiftlets
# Then symlink: ln -s /etc/nginx/sites-available/swiftlets /etc/nginx/sites-enabled/

# Rate limiting zone
limit_req_zone $binary_remote_addr zone=swiftlets_limit:10m rate=10r/s;

# Upstream definition for load balancing (optional)
upstream swiftlets_backend {
    server 127.0.0.1:8080 max_fails=3 fail_timeout=30s;
    # Add more servers for load balancing:
    # server 127.0.0.1:8081 max_fails=3 fail_timeout=30s;
    # server 127.0.0.1:8082 max_fails=3 fail_timeout=30s;
}

# HTTP server - redirects to HTTPS in production
server {
    listen 80;
    listen [::]:80;
    server_name your-domain.com www.your-domain.com;

    # For Let's Encrypt verification
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Redirect all HTTP traffic to HTTPS (uncomment in production)
    # location / {
    #     return 301 https://$server_name$request_uri;
    # }

    # For development without SSL (remove in production)
    location / {
        proxy_pass http://swiftlets_backend;
        include /etc/nginx/snippets/swiftlets-proxy.conf;
    }
}

# HTTPS server (uncomment and configure for production)
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name your-domain.com www.your-domain.com;
# 
#     # SSL configuration
#     ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     ssl_stapling on;
#     ssl_stapling_verify on;
#     add_header Strict-Transport-Security "max-age=63072000" always;
# 
#     # Main application
#     location / {
#         # Rate limiting
#         limit_req zone=swiftlets_limit burst=20 nodelay;
#         
#         proxy_pass http://swiftlets_backend;
#         include /etc/nginx/snippets/swiftlets-proxy.conf;
#     }
# 
#     # Static assets with aggressive caching
#     location ~* \.(jpg|jpeg|png|gif|ico|css|js|pdf|txt)$ {
#         root /opt/swiftlets/sites/swiftlets-site/public;
#         expires 1y;
#         add_header Cache-Control "public, immutable";
#         access_log off;
#     }
# 
#     # WebSocket support (if needed)
#     location /ws {
#         proxy_pass http://swiftlets_backend;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "upgrade";
#         proxy_read_timeout 86400;
#     }
# }

# Security headers and proxy configuration snippet
# Save as /etc/nginx/snippets/swiftlets-proxy.conf:
#
# proxy_http_version 1.1;
# proxy_set_header Host $host;
# proxy_set_header X-Real-IP $remote_addr;
# proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
# proxy_set_header X-Forwarded-Proto $scheme;
# proxy_set_header X-Forwarded-Host $server_name;
# proxy_cache_bypass $http_upgrade;
# 
# # Timeouts
# proxy_connect_timeout 60s;
# proxy_send_timeout 60s;
# proxy_read_timeout 60s;
# 
# # Buffer sizes
# proxy_buffer_size 4k;
# proxy_buffers 8 4k;
# proxy_busy_buffers_size 8k;
# 
# # Security headers
# add_header X-Frame-Options "SAMEORIGIN" always;
# add_header X-Content-Type-Options "nosniff" always;
# add_header X-XSS-Protection "1; mode=block" always;
# add_header Referrer-Policy "strict-origin-when-cross-origin" always;